#!/usr/bin/env ruby

$:.unshift File.expand_path(File.join(File.dirname(__FILE__), '..'))
$:.unshift File.expand_path(File.join(File.dirname(__FILE__), '..', 'httpclient-2.1.2', 'lib'))

require 'rubygems'
require 'ktghttpclient'
require 'nokogiri'
require 'lll'

require 'progressbar'

class TiVo
  def initialize
    @shows_cache_filename = File.expand_path(File.join(File.dirname(__FILE__), 'shows.xml'))
  end

  def shows reload = false
    download_shows if reload
    load_shows
  end

  def download url
    client = HTTPClient.new
    client.ssl_config.verify_mode = OpenSSL::SSL::VERIFY_NONE
    client.set_auth(url, 'tivo', 8185711423)
    # We ignore the first chunk to work around a bug in
    # http client where we see the "Auth required" digest-auth
    # header.
    first_chunk = true
    client.get_content(url) do |c|
      if first_chunk
        first_chunk = false
        next
      end
      yield c
    end
  end

  private
  def download_shows
    client = HTTPClient.new
    client.ssl_config.verify_mode = OpenSSL::SSL::VERIFY_NONE
    client.set_auth('https://10.0.1.7/TiVoConnect', 'tivo', 8185711423)
    File.open(@shows_cache_filename, 'w') do |file|
      file.write client.get_content('https://10.0.1.7/TiVoConnect?Command=QueryContainer&Container=/NowPlaying&Recurse=Yes')
    end
  end

  def load_shows
    shows = []
    document = Nokogiri::XML(File.read(@shows_cache_filename))
    document.css('Item').each do |item|
      item_details = item.css('Details')
      if item_details.css('ContentType').text =~ /raw-tts/
        shows << Show.new(self, item)
      end
    end
    shows
  end

end

class Show
  attr_reader :size, :url, :title

  def initialize tivo, item
    @tivo = tivo
    @keep = item.css('Links CustomIcon Url').text =~ /save-until-i-delete-recording/
    @title = item.css('Details Title').text
    @size = item.css('Details SourceSize').text.to_i
    @episode = item.css('Details EpisodeTitle').text
    @url = item.css('Links Content Url').text
  end

  def keep?
    @keep
  end

  def full_title
    return @title if @episode.empty?
    @title + ': ' + @episode
  end

  def download &block
    @tivo.download url, &block
  end
end

class Nropster
  def run
    tivo = TiVo.new
    shows = tivo.shows
    lll{'shows'};
    for show in shows
      if should_download? show
        IO.popen("tivodecode -o /Users/mwilden/Nrop/nropster/foo.mpg -", 'wb') do |td|
          pbar = Console::ProgressBar.new('foo', show.size)
          show.download do |dl|
            td << dl
            pbar.inc(dl.length)
          end
          pbar.finish
        end
      end
    end
  end

  private
  def should_download? show
    show.title =~ /Pump Fiction/
  end

end

Nropster.new.run

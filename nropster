#!/usr/bin/env ruby

$:.unshift File.expand_path(File.join(File.dirname(__FILE__), 'lib'))
$:.unshift File.expand_path(File.join(File.dirname(__FILE__), 'lib', 'vendor'))

require 'optparse'
require 'nropster'
require 'msg'
require 'lll'

VERSION_S = 'nropster 1.3: Download shows from TiVo and encode to DV'

def read_config_file(options)
  inclusion_exclusion_filename = File.expand_path(File.join(File.dirname(__FILE__), 'config.yaml'))
  inclusion_exclusion = YAML::load_file(inclusion_exclusion_filename) rescue {}
  options[:inclusion_regexp] = inclusion_exclusion[:include]
  options[:exclusion_regexp] = inclusion_exclusion[:exclude]
end

def parse_options
  options = {}

  read_config_file(options)

  optparse = OptionParser.new do |opts|

    opts.banner = "Usage nropster [options]"

    options[:confirm] = true
    opts.on('-c', '--[no-]confirm', '(default) Require pressing Enter before work starts') do |v|
      options[:confirm] = v
    end

    opts.on('-i', '--include REGEXP', 'Regexp of show names to include') do |regexp|
      options[:inclusion_regexp] = regexp
    end

    opts.on('-x', '--exclude REGEXP', 'Regexp of show names to exclude') do |regexp|
      options[:exclusion_regexp] = regexp
    end

    options[:force_download_existing] = false
    opts.on('-f', '--force',
            "Download shows even if already downloaded") do
      options[:force_download_existing] = true
    end

    options[:download_now_playing] = true
    opts.on('-n', '--no-download-now-playing',
            "Don't download Now Playing list from TiVo") do
      options[:download_now_playing] = false
    end

    options[:destination_directory] = "/Volumes/LaCie HD/Input"
    opts.on('-o', '--destination_directory DIR', 'Where to put the DV file' ) do |directory|
      options[:destination_directory] = directory
    end

    options[:edited_directory] = "/Volumes/LaCie HD/Edited/Media/Nrop"
    opts.on('-e', '--edited_directory DIR', 'Where the DV file might have been moved after editing (for existence check)') do |directory|
      options[:edited_directory] = directory
    end

    options[:work_directory] = "/tmp"

    opts.on('-v', '--version', 'Show version') do
      display_msg VERSION_S
      exit 1
    end
  end
  
  begin
    optparse.parse!
  rescue OptionParser::InvalidOption => ex
    display_msg ex.message
    puts optparse
    exit 1
  end
  options
end

Nropster.new(parse_options).run
